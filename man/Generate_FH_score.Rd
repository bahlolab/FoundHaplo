% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Generate_FH_score.R
\name{Generate_FH_score}
\alias{Generate_FH_score}
\title{A wrapper function to generate FH_score and IBD details for each test/control - disease pair}
\usage{
Generate_FH_score(
  DCV,
  minor_allele_cutoff = 0,
  imputation_quality_score_cutoff_test = 0,
  frequency_type,
  dir_geneticMap,
  dir_disease_files,
  test_file,
  test_name = "test",
  test_list,
  data_type,
  dir_controls_file,
  dir_to_save_report
)
}
\arguments{
\item{DCV}{Name of the disease causing variant of interest i.e FAME1.chr8.119379052 (type \code{"character"})}

\item{minor_allele_cutoff}{The minimum minor allele frequncy of SNPs allowed, we recommend this to be 0 (type \code{"numeric"})}

\item{imputation_quality_score_cutoff_test}{Minimum allowed imputation quality which is R-squared. Recommend to use 0.3 if the cohort has >100 samples ; 0 otherwise (type \code{"numeric"})}

\item{frequency_type}{Population of the test cohort i.e one of EUR,AMR,SAS,EAS,AFR etc (type \code{"character"})}

\item{dir_geneticMap}{Directory path to genetic_map_HapMapII_GRCh37 location (type \code{"character"})}

\item{dir_disease_files}{directory of the disease haplotype VCFs for a single disease variant(type \code{"character"})}

\item{test_file}{path of the test cohort file (type \code{"character"})}

\item{test_name}{meaningful name for the test cohort  (type \code{"character"})}

\item{test_list}{path to a set of 100 test samples from the test cohort  (type \code{"character"})}

\item{data_type}{"test" or "control (type \code{"character"})}

\item{dir_controls_file}{Directory where the 1000genome control files are stored  (type \code{"character"})}

\item{dir_to_save_report}{Directory path to save the required details of the IBD sharing to analyze later  (type \code{"character"})}
}
\value{
All details of IBD sharing for each test/control sample will be saved in a seperate tab delimitted text file in dir_to_save_report location, with below columns :
name of each text file will be data_type.test_name.DCV.disease_individual.test_individual.frequency_type.imputation_quality_score_cutoff_test.txt

\enumerate{
\item data_type, "test" or "control (type \code{"character"})
\item test_name, meaningful name for the test cohort (type \code{"character"})
\item frequency_type, population of the test cohort i.e one of EUR,AMR,SAS,EAS,AFR etc (type \code{"character"})
\item minor_allele_cutoff (type \code{"numeric"})
\item imputation_quality_score_cutoff_test (type \code{"numeric"})
\item DCV (type \code{"character"})
\item disease_haplotype (type \code{"character"})
\item test_individual (type \code{"character"})
\item FH_score (type \code{"numeric"})
\item left_LLR (type \code{"numeric"})
\item right_LLR (type \code{"numeric"})
\item total_cM_sharing (type \code{"numeric"})
\item total_left_cM_sharing (type \code{"numeric"})
\item total_right_cM_sharing (type \code{"numeric"})
\item number_of_allele_mismatches_in_the_markov_chain (type \code{"numeric"})
\item number_of_markers_in_the_markov_chain (type \code{"numeric"})
\item numer_of_haplotype_switches_in_the_markov_chain (type \code{"numeric"})
\item snp_density_in_data_file (type \code{"numeric"})
\item total_number_of_markers_in_data_file (type \code{"numeric"})
\item total_cM_span_of_data_file (type \code{"numeric"})
}
}
\description{
This function save FH score and IBD details for each test/control - disease pair in a .txt file in "dir_to_save_report"
Run this function on R command line since system() command used in the function doesn't work on R studio.
Ethnicity of the test cohort should be decided in advance EUR,AMR,SAS,EAS,AFR etc
Make sure that imputation quality score R2 or R-squared is the third field of the INFO column of the test VCF file.
Genome built should be GRCh37 and genetic map in "dir_geneticMap" must have chromosomes named with "chr" prefix, add the prefix if needed
}
\examples{
orig_dir <- getwd()
setwd(tempdir())
file.remove(list.files())
if(!dir.exists(paste0(tempdir(), "/1"))){dir.create(paste0(tempdir(), "/1"))} #to save disease haplotypes
if(!dir.exists(paste0(tempdir(), "/2"))){dir.create(paste0(tempdir(), "/2"))} #to save test_list of sample names in .txt files
if(!dir.exists(paste0(tempdir(), "/3"))){dir.create(paste0(tempdir(), "/3"))}  # dir_controls_file
if(!dir.exists(paste0(tempdir(), "/4"))){dir.create(paste0(tempdir(), "/4"))} # to save IBD results
temp_dir <- tempdir() # To carryout the main workload
write.table(genetic_map_GRCh37_chr8,"genetic_map_GRCh37_chr8.txt",sep = "\t",quote=FALSE, row.names=FALSE,col.names = TRUE)
write.table(trimmed_chr8_hg19_ALL.sites.2015_08,paste0(temp_dir,"/","hg19_ALL.sites.2015_08.txt"),sep = "\t",quote=FALSE, row.names=FALSE,col.names = FALSE)
write.table(trimmed_chr8_hg19_AFR.sites.2015_08,paste0(temp_dir,"/","hg19_AFR.sites.2015_08.txt"),sep = "\t",quote=FALSE, row.names=FALSE,col.names = FALSE)
write.table(trimmed_chr8_hg19_AMR.sites.2015_08,paste0(temp_dir,"/","hg19_AMR.sites.2015_08.txt"),sep = "\t",quote=FALSE, row.names=FALSE,col.names = FALSE)
write.table(trimmed_chr8_hg19_EUR.sites.2015_08,paste0(temp_dir,"/","hg19_EUR.sites.2015_08.txt"),sep = "\t",quote=FALSE, row.names=FALSE,col.names = FALSE)
write.table(trimmed_chr8_hg19_EAS.sites.2015_08,paste0(temp_dir,"/","hg19_EAS.sites.2015_08.txt"),sep = "\t",quote=FALSE, row.names=FALSE,col.names = FALSE)
write.table(trimmed_chr8_hg19_SAS.sites.2015_08,paste0(temp_dir,"/","hg19_SAS.sites.2015_08.txt"),sep = "\t",quote=FALSE, row.names=FALSE,col.names = FALSE)
library(vcfR)
write.vcf(FAME1_disease_cohort,paste0(temp_dir,"/","FAME1_disease_cohort.vcf.gz"))

Phasing_by_pedigree(input_vcf = paste0(temp_dir,"/FAME1_disease_cohort",".vcf.gz"),
                   dir_input_ref = temp_dir,
                   dir_output = paste0(temp_dir,"/1"),
                   type="trio",
                   sample_names = c("NA11920","Affected_parent_NA11920","Unaffected_parent_NA11920"))

write.vcf(FAME1_test_cohort,paste0(temp_dir,"/","FAME1_test_cohort.vcf.gz"))
write.table(file00,paste0(temp_dir,"/2/","file00",".txt"),sep = "\t",quote=FALSE, row.names=FALSE,col.names = FALSE)
write.vcf(FAME1_control_cohort,paste0(temp_dir,"/3/","FAME1.chr8.vcf.gz"))
Generate_FH_score(DCV="FAME1.chr8.119379052.",minor_allele_cutoff=0,imputation_quality_score_cutoff_test=0,frequency_type="EUR",dir_geneticMap=temp_dir,dir_disease_files=paste0(temp_dir,"/1"),test_file=paste0(temp_dir,"/","FAME1_test_cohort.vcf.gz"),test_name="FAME1_example_test_cohort",test_list=paste0(temp_dir,"/2/","file00.txt"),data_type="test",dir_controls_file=paste0(temp_dir,"/3"),dir_to_save_report=paste0(temp_dir,"/4"))
setwd(paste0(temp_dir,"/4"))
read.delim(list.files(paste0(temp_dir,"/4"))[1],header=FALSE)
setwd(orig_dir)
}
